#!/bin/bash

# Fonction pour afficher un message d'erreur et annuler le commit
function fail_commit {
  echo "$1"
  exit 1
}

# Vérifier les fichiers PHP
php_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.php$')
if [[ "$php_files" ]]; then
  for file in $php_files; do
    php -l "$file"
    if [[ $? -ne 0 ]]; then
      fail_commit "Erreur de syntaxe PHP dans le fichier: $file"
    fi
  done
fi

# Vérifier les fichiers JSON
json_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.json$')
if [[ "$json_files" ]]; then
  for file in $json_files; do
    jq . "$file" > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
      fail_commit "Erreur de syntaxe JSON dans le fichier: $file"
    fi
  done
fi

# Vérifier les fichiers YAML
yaml_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.ya?ml$')
if [[ "$yaml_files" ]]; then
  for file in $yaml_files; do
    yaml-lint "$file" > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
      fail_commit "Erreur de syntaxe YAML dans le fichier: $file"
    fi
  done
fi

# Convertir les fins de ligne CRLF en LF pour tous les fichiers modifiés
all_files=$(git diff --cached --name-only --diff-filter=ACM)
if [[ "$all_files" ]]; then
  for file in $all_files; do
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
      # Utiliser PowerShell pour convertir les fins de ligne sur Windows
      powershell.exe -Command "(Get-Content -Raw -Path \"$file\") -replace \"\`r\`n\", \"\`n\" | Set-Content -NoNewline -Path \"$file\""
    else
      # Utiliser sed pour convertir les fins de ligne sur Unix
      sed -i 's/\r$//' "$file"
    fi
    if [[ $? -ne 0 ]]; then
      fail_commit "Erreur lors de la conversion des fins de ligne dans le fichier: $file"
    fi
  done
fi

# Si toutes les vérifications passent, autoriser le commit
exit 0
